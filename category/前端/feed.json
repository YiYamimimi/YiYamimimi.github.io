{
    "version": "https://jsonfeed.org/version/1",
    "title": "每一个字节都藏着无尽的智慧与灵感，欢迎来到这场知识与思想的奇妙之旅！ • All posts by \"前端\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/01/02/front-end/no-title/",
            "url": "http://example.com/2023/01/02/front-end/no-title/",
            "title": "Excel 导入导出（前端处理：xslx）（后端处理：hutool+poi || Easy Excel ）",
            "date_published": "2023-01-02T12:46:25.000Z",
            "content_html": "<h1 id=\"excel-导入导出前端处理xslx\"><a class=\"anchor\" href=\"#excel-导入导出前端处理xslx\">#</a> Excel 导入导出（前端处理：xslx）</h1>\n<ol>\n<li><strong>调用文件对象的</strong> <strong>arrayBuffer</strong> 方法读取文件，然后使用 **xslx.**<strong>read</strong> 方法解析数为 <strong>Excel 工作簿对象</strong></li>\n<li><strong>readAsBinaryString</strong> 和 <strong>readAsArrayBuffer</strong> 是 <strong>FileReader</strong> 对象的两种不同读取文件的方式：</li>\n</ol>\n<blockquote>\n<ul>\n<li>创建 <strong>FileReader</strong> 对象。使用<strong> FileReader</strong> <strong>对象的读取文件方法</strong>： <strong>readAsBinaryString</strong> ，将文件读取为二进制字符串；或使用 <strong>readAsArrayBuffer</strong> 方法会将文件读取为二进制数据缓冲区，即<strong> ArrayBuffer 对象。</strong></li>\n<li>再使用 **xslx.**<strong>read</strong> 方法解析数据为 Excel 工作簿对象</li>\n</ul>\n</blockquote>\n<p>3. 下图为<strong> Excel 工作簿对象</strong>实例：<br />\n<img data-src=\"https://s2.loli.net/2024/01/16/Bnj6OHGy1V8TeIq.png\" alt=\"输入图片说明\" /><img data-src=\"https://cdn.nlark.com/yuque/0/2023/webp/32496480/1703057873177-0ebecc5d-f693-47af-9191-4f6e983747fa.webp?x-oss-process=image%2Fresize%2Cw_588%2Climit_0\" alt=\"\" /><br />\n<img data-src=\"https://s2.loli.net/2024/01/16/8OATF9epYVawxur.png\" alt=\"输入图片说明\" /><img data-src=\"https://cdn.nlark.com/yuque/0/2024/webp/32496480/1705325153314-84eec0f5-a70b-4f40-ba5a-3b6c51fcf013.webp?x-oss-process=image%2Fresize%2Cw_720%2Climit_0\" alt=\"\" /></p>\n<h2 id=\"代码示例\"><a class=\"anchor\" href=\"#代码示例\">#</a> 代码示例</h2>\n<h3 id=\"导入excel数据\"><a class=\"anchor\" href=\"#导入excel数据\">#</a> 导入 Excel 数据</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const reader = new FileReader()</span><br><span class=\"line\">reader.readAsBinaryString(file)</span><br><span class=\"line\">reader.onload = function (e) &#123; </span><br><span class=\"line\">    const data = e.target.result</span><br><span class=\"line\">    let wb = XLSX.read(data, &#123;//Excel 工作簿对象，打印如上</span><br><span class=\"line\">        type: &#x27;binary&#x27;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">const reader = new FileReader()</span><br><span class=\"line\">reader.readAsArrayBuffer(file)</span><br><span class=\"line\">reader.onload = function (e) &#123;</span><br><span class=\"line\">    const data = e.target.result</span><br><span class=\"line\">    let wb = XLSX.read(data, &#123;</span><br><span class=\"line\">        type: &#x27;array&#x27;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<details><summary>解析</summary><div>\n<blockquote>\n<ol>\n<li>创建 <strong>FileReader</strong> 对象。</li>\n<li>使用<strong> FileReader</strong> <strong>对象的读取文件方法</strong>： <strong>readAsBinaryString</strong> ，将文件读取为二进制字符串。</li>\n</ol>\n<p>（使用 <strong>readAsArrayBuffer</strong> 方法会将文件读取为二进制数据缓冲区，即<strong> ArrayBuffer 对象</strong>）</p>\n<ol>\n<li>设置 <strong>onload</strong> 回调函数，该函数在文件读取成功后触发。</li>\n<li>在回调函数中，通过 <strong>e.target.result</strong> 获取读取文件成功的结果值，即文件的二进制数据。</li>\n<li>使用 <strong>XLSX.read</strong> 方法解析<strong>二进制字符串</strong>或<strong> ArrayBuffer 对象</strong>为 Excel 工作簿对象</li>\n</ol>\n<p>（<strong>type: 'binary'</strong> 表示解析的数据类型是二进制字符串；<strong>type: 'array'<strong> 表解析的数据类型是</strong> ArrayBuffer 对象</strong>）</p>\n<ol>\n<li>如果提供了回调函数 <strong>callback</strong>，则调用该函数，并将解析得到的 <strong>workbook</strong> 对象传递给回调函数。</li>\n</ol>\n<p>这个流程适用于在前端处理 Excel 文件，你可以在回调函数中进一步处理 <strong>workbook</strong> 对象，比如获取工作表、将工作表转换为 JSON 等。</p>\n<p>/*</p>\n<p><strong>readAsBinaryString</strong> 和 <strong>readAsArrayBuffer</strong> 是 <strong>FileReader</strong> 对象的两种不同读取文件的方式。</p>\n<p>readAsBinaryString 方法是过时的</p>\n<p>官方推荐使用 readAsArrayBuffer 方法</p>\n<p>*/</p>\n</blockquote>\n</div></details>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input ref=&quot;excel-upload-input&quot; class=&quot;excel-upload-input&quot; type=&quot;file&quot; accept=&quot;.xlsx, .xls&quot; @change=&quot;handleClick&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">let _file = e.target.files[0];//获取input标签里的文件</span><br><span class=\"line\"></span><br><span class=\"line\">_file.arrayBuffer().then((res) =&gt; &#123;</span><br><span class=\"line\">    const wb = XLSX.read(res);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<details><summary>解析</summary><div>\n<blockquote>\n<p>使用 arrayBuffer 方法，更符合现代 JavaScript 异步风格</p>\n<ol>\n<li>获取 input 标签里的文件</li>\n<li><strong>调用文件对象的</strong> <strong>arrayBuffer</strong> 方法，该方法返回一个 Promise，该 Promise 在文件数据准备好时解析。</li>\n<li>在 <strong>then</strong> 方法中，获取解析后的二进制数据 <strong>res</strong>。</li>\n<li>使用 <strong>XLSX.read</strong> 方法解析二进制数据，得到 <strong>wb</strong>，这里的 <strong>read</strong> 方法是你项目中封装的读取 Excel 数据的函数。</li>\n</ol>\n</blockquote>\n</div></details>\n<h3 id=\"将数据封装好后传给后端\"><a class=\"anchor\" href=\"#将数据封装好后传给后端\">#</a> 将数据封装好后传给后端</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// XLSX.utils.sheet_to_json</span><br><span class=\"line\">const sheet1 = wb.Sheets.Sheet1</span><br><span class=\"line\">const _data = utils.sheet_to_json(sheet1);</span><br><span class=\"line\"></span><br><span class=\"line\">const wsname = wb.SheetNames[0]; //取Excel 工作簿对象的第一张表</span><br><span class=\"line\">const ws = XLSX.utils.sheet_to_json(wb.Sheets[wsname]); //将那张表转成json表格内容(实际上是数组)</span><br><span class=\"line\">//把解析出来的Excel数据，直接转成表格需要的数据</span><br><span class=\"line\">ws.forEach((item) =&gt; &#123;</span><br><span class=\"line\">    that.lists.push(&#123;</span><br><span class=\"line\">        //处理后端要接收的数据格式</span><br><span class=\"line\">        // factoryName: item[&quot;工厂&quot;],</span><br><span class=\"line\">        // wokhouseName: item[&quot;车间&quot;],</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    console.log(that.lists);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<details><summary>解析</summary><div>\n<blockquote>\n<ol>\n<li>取 Excel 工作簿对象的第一张表</li>\n<li>使用<strong> XLSX.utils.sheet_to_json</strong> 将那张表转成 json 表格内容</li>\n<li>可处理转化的 JSON 数据为后端所需要的格式</li>\n</ol>\n</blockquote>\n</div></details>\n<h3 id=\"导出数据\"><a class=\"anchor\" href=\"#导出数据\">#</a> 导出数据</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let book = XLSX.utils.book_new()</span><br><span class=\"line\">let aoa = [</span><br><span class=\"line\">  [&#x27;姓名&#x27;, &#x27;性别&#x27;, &#x27;年龄&#x27;, &#x27;注册时间&#x27;],</span><br><span class=\"line\">  [&#x27;张三&#x27;, &#x27;男&#x27;, 18, new Date()],</span><br><span class=\"line\">  [&#x27;李四&#x27;, &#x27;女&#x27;, 22, new Date()]</span><br><span class=\"line\">];</span><br><span class=\"line\">// 将一个二维数组转成sheet</span><br><span class=\"line\">// aoa_to_sheet: 这个工具类最强大也最实用了，将一个二维数组转成sheet，会自动处理number、string、boolean、date等类型数据；</span><br><span class=\"line\">let sheet = XLSX.utils.aoa_to_sheet(aoa);</span><br><span class=\"line\">XLSX.utils.book_append_sheet(book, sheet, &quot;sheet1&quot;)</span><br><span class=\"line\">XLSX.writeFile(book, `user$&#123;new Date().getTime()&#125;.xls`)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">const wb = XLSX.utils.book_new(); </span><br><span class=\"line\">let data = [</span><br><span class=\"line\">  &#123; name: &quot;张三&quot;, id: 100, score: 99 &#125;,</span><br><span class=\"line\">  &#123; name: &quot;张四&quot;, id: 200, score: 99 &#125;,</span><br><span class=\"line\">  &#123; name: &quot;张五&quot;, id: 300, score: 99 &#125;</span><br><span class=\"line\">]//转化JSON数组 </span><br><span class=\"line\">const ws = XLSX.utils.json_to_sheet(data); </span><br><span class=\"line\">XLSX.utils.book_append_sheet(wb, ws, &quot;people&quot;); </span><br><span class=\"line\">XLSX.writeFile(wb, &quot;test1.xlsx&quot;);</span><br></pre></td></tr></table></figure></p>\n<details><summary>解析</summary><div>\n<blockquote>\n<ol>\n<li>使用 XLSX.utils.aoa_to_sheet 方法将一个二维数组转化为一个工作表 (sheet)。</li>\n</ol>\n<p>一个包含对象的数组 <strong>data</strong>，通过 <strong>XLSX.utils.json_to_sheet</strong> 方法将其转换为 Excel 工作表</p>\n<ol>\n<li>使用<strong> XLSX.utils.book_new</strong> 方法创建一个新的工作簿 (book)。</li>\n<li>使用<strong> XLSX.utils.book_append_sheet</strong> 方法将之前创建的工作表添加到工作簿中，并命名为 &quot;sheet1&quot;。</li>\n<li>使用<strong> XLSX.writeFile</strong> 方法将工作簿保存为一个 Excel 文件。</li>\n</ol>\n</blockquote>\n</div></details>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">const reader = new FileReader()</span><br><span class=\"line\">reader.readAsBinaryString(file)</span><br><span class=\"line\">//onload 回调函数，该函数在文件读取成功后触发</span><br><span class=\"line\">reader.onload = function (e) &#123; </span><br><span class=\"line\">    //回调函数中，通过 e.target.result 获取读取文件成功的结果值，即文件的二进制数据BinaryString</span><br><span class=\"line\">    const data = e.target.result</span><br><span class=\"line\">    //使用 XLSX.read 方法解析二进制数据BinaryString，type: &#x27;binary为 Excel 工作簿对象</span><br><span class=\"line\">    let wb = XLSX.read(data, &#123;</span><br><span class=\"line\">        type: &#x27;binary&#x27;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/* </span><br><span class=\"line\">readAsBinaryString 和 readAsArrayBuffer 是 FileReader 对象的两种不同读取文件的方式。</span><br><span class=\"line\">readAsBinaryString 方法是过时的</span><br><span class=\"line\">官方推荐使用 readAsArrayBuffer 方法</span><br><span class=\"line\">*/</span><br><span class=\"line\">const reader = new FileReader()</span><br><span class=\"line\">reader.readAsArrayBuffer(file)</span><br><span class=\"line\">reader.onload = function (e) &#123;</span><br><span class=\"line\">    const data = e.target.result</span><br><span class=\"line\">    let wb = XLSX.read(data, &#123;//Excel 工作簿对象</span><br><span class=\"line\">        type: &#x27;array&#x27;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//————————————————————————————————————————————————————————</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input ref=&quot;excel-upload-input&quot; class=&quot;excel-upload-input&quot; type=&quot;file&quot; accept=&quot;.xlsx, .xls&quot; @change=&quot;handleClick&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//使用 arrayBuffer 方法，更符合现代 JavaScript 异步风格</span><br><span class=\"line\">let _file = e.target.files[0];//获取input标签里的文件</span><br><span class=\"line\">//调用文件对象的arrayBuffer方法，该方法返回一个 Promise，该 Promise 在文件数据准备好时解析</span><br><span class=\"line\">_file.arrayBuffer().then((res) =&gt; &#123;</span><br><span class=\"line\">\t//在 then 方法中，获取解析后的二进制数据 res。</span><br><span class=\"line\">    const wb = read(res);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//————————————————————————————————————————————————————</span><br><span class=\"line\">// XLSX.utils.sheet_to_json</span><br><span class=\"line\">const sheet1 = wb.Sheets.Sheet1</span><br><span class=\"line\">const _data = utils.sheet_to_json(sheet1);</span><br><span class=\"line\"></span><br><span class=\"line\">const wsname = wb.SheetNames[0]; //取Excel 工作簿对象的第一张表</span><br><span class=\"line\">const ws = XLSX.utils.sheet_to_json(wb.Sheets[wsname]); //将那张表转成json表格内容(实际上是 )</span><br><span class=\"line\">//把解析出来的Excel数据，直接转成表格需要的数据</span><br><span class=\"line\">ws.forEach((item) =&gt; &#123;</span><br><span class=\"line\">    that.lists.push(&#123;</span><br><span class=\"line\">        //处理后端要接收的数据格式</span><br><span class=\"line\">        // factoryName: item[&quot;工厂&quot;],</span><br><span class=\"line\">        // wokhouseName: item[&quot;车间&quot;],</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    console.log(that.lists);</span><br><span class=\"line\">&#125;) </span><br></pre></td></tr></table></figure></p>\n<h3 id=\"预览vue-officeexceldocx-preview\"><a class=\"anchor\" href=\"#预览vue-officeexceldocx-preview\">#</a> 预览（vue-office/excel&quot;……；docx-preview）</h3>\n<p><img data-src=\"https://s2.loli.net/2024/01/16/PAGosrNldZ5BSYE.png\" alt=\"输入图片说明\" /><img data-src=\"https://cdn.nlark.com/yuque/0/2023/png/32496480/1701781354926-92e813d6-8499-4a15-8d5e-15ce458bce36.png\" alt=\"image.png\" /></p>\n<p>上传后预览<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;vueofficeExcel v-if=&quot;excelSrc&quot; :src=&quot;excelSrc&quot; style=&quot;height:500px&quot;&gt;&lt;/vueofficeExcel&gt;</span><br><span class=\"line\">&lt;input type=&quot;file&quot; @change=&quot;change&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">import vueofficeExcel from &quot;@vue-office/excel&quot;;</span><br><span class=\"line\">import vueofficedocx from &quot;@vue-office/docx&quot;;</span><br><span class=\"line\">import vueofficedpdf from &quot;@vue-office/pdf&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">change(e) &#123;</span><br><span class=\"line\">  let _file = e.target.files[0]</span><br><span class=\"line\">  const fr = new FileReader();</span><br><span class=\"line\">  fr.readAsDataURL(_file);</span><br><span class=\"line\">  fr.onload = (e) =&gt;&#123;</span><br><span class=\"line\">    this.excelSrc = e.target.result;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><br />\n 上传后预览（做图片缩略图）<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let fr = new FileReader(); </span><br><span class=\"line\">fr.readAsDataURL(file);</span><br><span class=\"line\">let self = this;</span><br><span class=\"line\">fr.onload = function () &#123;</span><br><span class=\"line\">  self.imgbase64 = fr.result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\ndocx-preview 也可用于 docx 预览<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div ref=&quot;docxPreview&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123; renderAsync &#125; from &quot;docx-preview&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">let _file = e.target.files[0];</span><br><span class=\"line\">//blob, arrayBuffer</span><br><span class=\"line\">renderAsync(_file, this.$refs.docxPreview)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"二-excel-导入导出后端处理hutoolpoi-easy-excel\"><a class=\"anchor\" href=\"#二-excel-导入导出后端处理hutoolpoi-easy-excel\">#</a> 二、Excel 导入导出 (后端处理：hutool+poi || Easy Excel)</h1>\n<h2 id=\"1-前端\"><a class=\"anchor\" href=\"#1-前端\">#</a> 1、前端</h2>\n<blockquote>\n<p>思路：</p>\n<ol>\n<li>导入：前端直接返回给后端<strong>文件对象</strong></li>\n<li>导出选中的或导出全部：<strong>将选中的 id 记录在 ids 数组里</strong>；根据 ids 数组长度判断是选中导出还是导出全部；</li>\n</ol>\n<p><strong>调用接口：</strong></p>\n<p>导出全部的可向后端传入 ids.join (',')// 把数组转成字符串</p>\n<p>导出全部的传入用户名参数</p>\n</blockquote>\n<p>代码示例<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleImport(res, file, fileList) &#123;</span><br><span class=\"line\">  if (res.code === &#x27;200&#x27;) &#123;</span><br><span class=\"line\">    this.$message.success(&quot;操作成功&quot;)</span><br><span class=\"line\">    this.load(1)</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    this.$message.error(res.msg)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">exportData() &#123;   // 批量导出数据</span><br><span class=\"line\">  if (!this.ids.length) &#123;   // 没有选择行的时候，全部导出  或者根据我的搜索条件导出</span><br><span class=\"line\">    window.open(&#x27;http://localhost:9090/user/export?token=&#x27; + this.user.token + &quot;&amp;username=&quot;</span><br><span class=\"line\">        + this.username + &quot;&amp;name=&quot; + this.name)</span><br><span class=\"line\">  &#125; else &#123;      // [1,2,3] =&gt; &#x27;1,2,3&#x27;//选中的导出</span><br><span class=\"line\">    let idStr = this.ids.join(&#x27;,&#x27;)//把数组转成字符串</span><br><span class=\"line\">    window.open(&#x27;http://localhost:9090/user/export?token=&#x27; + this.user.token + &#x27;&amp;ids=&#x27; + idStr)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<hr />\n<h2 id=\"2-后端使用hutool处理excel-文件\"><a class=\"anchor\" href=\"#2-后端使用hutool处理excel-文件\">#</a> 2、后端使用 Hutool 处理 Excel 文件</h2>\n<h3 id=\"hutool-poi是针对apache-poi的封装因此需要用户自行引入poi库\"><a class=\"anchor\" href=\"#hutool-poi是针对apache-poi的封装因此需要用户自行引入poi库\">#</a> Hutool-poi 是针对 Apache POI 的封装，因此需要用户自行引入 POI 库</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;cn.hutool&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;5.3.7&lt;/version&gt; </span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;5.2.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"导入\"><a class=\"anchor\" href=\"#导入\">#</a> 导入</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@PostMapping(&quot;/import&quot;)</span><br><span class=\"line\">public Result importData(MultipartFile file) throws IOException &#123;</span><br><span class=\"line\">    ExcelReader reader = ExcelUtil.getReader(file.getInputStream());</span><br><span class=\"line\">    List&lt;User&gt; userList = reader.readAll(User.class);//读取所有数据并转成user类</span><br><span class=\"line\">    // 写入数据到数据库</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        userService.saveBatch(userList);</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        return Result.error(&quot;数据批量导入错误&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return Result.success();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<details><summary>解析</summary><div>\n<blockquote>\n<p><strong>ExcelUtil</strong> ： Hutool-poi 模块中的一个工具类，用于处理 Excel 文件的读写。</p>\n<ol>\n<li>通过 <strong>ExcelUtil.getReader(file.getInputStream())</strong> 获取了一个 <strong>ExcelReader</strong> 对象</li>\n<li>使用 <strong>reader.readAll(User.class)</strong> 读取了 Excel 中的所有数据并将其转换为 <strong>User</strong> 类的对象列表。</li>\n<li>最后将这些对象列表通过 <strong>userService.saveBatch(userList)</strong> 写入到数据库中。</li>\n</ol>\n</blockquote>\n</div></details>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping(&quot;/export&quot;)</span><br><span class=\"line\">public void exportData(@RequestParam(required = false) String username,</span><br><span class=\"line\">                       @RequestParam(required = false) String name,</span><br><span class=\"line\">                       @RequestParam(required = false) String ids,//1,2,3,4</span><br><span class=\"line\">                       HttpServletResponse response) throws IOException &#123;</span><br><span class=\"line\">    ExcelWriter writer = ExcelUtil.getWriter(true);</span><br><span class=\"line\">    List&lt;User&gt; list;</span><br><span class=\"line\">    QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    if (StrUtil.isNotBlank(ids)) &#123;</span><br><span class=\"line\">        // 将逗号分隔的字符串转换为整数列表：[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]  =&gt;[1,2,3]</span><br><span class=\"line\">        List&lt;Integer&gt; idsArr1 = Arrays.stream(ids.split(regex &quot;,&quot;)).map(Integer::value0f).collect(Collectors.tolist());</span><br><span class=\"line\">        queryWrapper.in(column: &quot;id&quot;, idsArr1);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        // 第一种全部导出或者条件导出</span><br><span class=\"line\">        queryWrapper.like(StrUtil.isNotBlank(username), column: &quot;username&quot;, username);</span><br><span class=\"line\">        queryWrapper.like(StrUtil.isNotBlank(name), column: &quot;name&quot;, name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    list = userService.list(queryWrapper);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 将查询到的用户数据写入 Excel</span><br><span class=\"line\">    writer.write(list, true);//告知那些key是头，让后把key一样的value放在同一列</span><br><span class=\"line\">    // 设置浏览器响应的格式</span><br><span class=\"line\">response.setContentType(&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8&quot;);</span><br><span class=\"line\">response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=&quot; + URLEncoder.encode(&quot;用户信息表&quot;, &quot;UTF-8&quot;) + &quot;.xlsx&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">ServletOutputStream out = response.getOutputStream();</span><br><span class=\"line\">writer.flush(out, true);</span><br><span class=\"line\">out.close();</span><br><span class=\"line\">writer.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<details><summary>解析</summary><div>\n<blockquote>\n<p>判断前端是否有传过来 ids，有就将其转成数组并 queryWrapper 查询出，没有就根据其他条件查询出数据列表</p>\n<ol>\n<li>创建 ExcelWriter 对象，参数为是否是 XLSX 格式</li>\n<li>将查询到的用户数据写入 Excel，并告知那些 key 是表头，让后把 key 一样的 value 放在同一列</li>\n<li>设置浏览器响应的格式和文件名</li>\n<li>通过 <strong>writer.flush(out, true)</strong> 将 Excel 数据输出到浏览器。</li>\n<li>最后关闭输出流和 ExcelWriter 对象</li>\n</ol>\n</blockquote>\n</div></details>\n<h3 id=\"如何给导出的excel表头设置中文\"><a class=\"anchor\" href=\"#如何给导出的excel表头设置中文\">#</a> 如何给导出的 excel 表头设置中文？</h3>\n<p>只需要在实体类的属性上面加一个注解 @Alias (&quot;中文&quot;)<br />\n<img data-src=\"https://s2.loli.net/2024/01/16/sPVjA85DLTYcekw.png\" alt=\"输入图片说明\" /></p>\n<h3 id=\"list里的对象有键值对键为表头值为表头下的内容\"><a class=\"anchor\" href=\"#list里的对象有键值对键为表头值为表头下的内容\">#</a> list 里的对象有键值对，键为表头，值为表头下的内容</h3>\n<blockquote>\n<p>查询出来的 list 里是一条条 user 对象，所以有键值对<br />\n<img data-src=\"https://s2.loli.net/2024/01/16/fesVv3dWSytCnor.png\" alt=\"输入图片说明\" /></p>\n</blockquote>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2MuaHV0b29sLmNuL3BhZ2VzL0V4Y2VsV3JpdGVyLyNfMi0lRTUlODYlOTklRTUlODclQkFtYXAlRTYlOTUlQjAlRTYlOEQlQUU=\">Excel 生成 - ExcelWriter | Hutool</span></p>\n<p>map 数据的写法<br />\n<img data-src=\"https://s2.loli.net/2024/01/16/PtLFrJlR7Ei1O8N.png\" alt=\"输入图片说明\" /><br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping(&quot;/export&quot;)</span><br><span class=\"line\">public void exportData(@RequestParam(required = false) String username,</span><br><span class=\"line\">                       @RequestParam(required = false) String name,</span><br><span class=\"line\">                       @RequestParam(required = false) String ids,//1,2,3,4</span><br><span class=\"line\">                       HttpServletResponse response) throws IOException &#123;</span><br><span class=\"line\">    ExcelWriter writer = ExcelUtil.getWriter(true);</span><br><span class=\"line\">    List&lt;User&gt; list;</span><br><span class=\"line\">    QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    if (StrUtil.isNotBlank(ids)) &#123;</span><br><span class=\"line\">        // 将逗号分隔的字符串转换为整数列表：[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]  =&gt;[1,2,3]</span><br><span class=\"line\">        List&lt;Integer&gt; idsArr1 = Arrays.stream(ids.split(regex &quot;,&quot;)).map(Integer::value0f).collect(Collectors.tolist());</span><br><span class=\"line\">        queryWrapper.in(column: &quot;id&quot;, idsArr1);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        // 第一种全部导出或者条件导出</span><br><span class=\"line\">        queryWrapper.like(StrUtil.isNotBlank(username), column: &quot;username&quot;, username);</span><br><span class=\"line\">        queryWrapper.like(StrUtil.isNotBlank(name), column: &quot;name&quot;, name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    list = userService.list(queryWrapper);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 将查询到的用户数据写入 Excel</span><br><span class=\"line\">    writer.write(list, true);//告知那些key是头，让后把key一样的value放在同一列</span><br><span class=\"line\">    // 设置浏览器响应的格式</span><br><span class=\"line\">response.setContentType(&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8&quot;);</span><br><span class=\"line\">response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=&quot; + URLEncoder.encode(&quot;用户信息表&quot;, &quot;UTF-8&quot;) + &quot;.xlsx&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">ServletOutputStream out = response.getOutputStream();</span><br><span class=\"line\">writer.flush(out, true);</span><br><span class=\"line\">out.close();</span><br><span class=\"line\">writer.close();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@PostMapping(&quot;/import&quot;)</span><br><span class=\"line\">public Result importData(MultipartFile file) throws IOException &#123;</span><br><span class=\"line\">    ExcelReader reader = ExcelUtil.getReader(file.getInputStream());</span><br><span class=\"line\">    List&lt;User&gt; userList = reader.readAll(User.class);//读取所有数据并转成user类</span><br><span class=\"line\">    // 写入数据到数据库</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        userService.saveBatch(userList);</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        return Result.error(&quot;数据批量导入错误&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return Result.success();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>​</p>\n",
            "tags": []
        }
    ]
}